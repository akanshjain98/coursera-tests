import { dayMetadata } from "@/shared/constants";
import { formatCronRange, UTCTime } from "@/shared/utils";
import { useFormik } from "formik";
import { useState } from "react";
import CustomTimePicker from "./form/customTimePicker";
import styles from "@/assets/styles/components/cron-schedule.module.css";

interface CronSchedulerProps extends Props {
  isScheduling?: boolean;
  defaultValues?: { startCronString: string; stopCronString: string };
  scheduleHandler: (startCronString: string, stopCronString: string) => void;
  close: React.Dispatch<React.SetStateAction<boolean>>;
}
interface Schedule {
  daysOfWeek: string;
  startTime: string;
  stopTime: string;
}

function CronScheduler({ isScheduling, defaultValues, scheduleHandler, close }: CronSchedulerProps) {
  const [isCustom, setIsCustom] = useState(false);

  const initialValues: Schedule = {
    daysOfWeek: defaultValues?.startCronString?.substring(10) || "1-5",
    startTime: "12:00",
    stopTime: "20:00"
  };

  const defaultSchedule: { label: string; value: string; }[] = [
    { label: "Weekdays", value: "1-5" },
    { label: "Weekends", value: "0,6" },
    { label: "Everyday", value: "0-6" },
    { label: "Custom", value: "custom" }
  ]

  const formik = useFormik<Schedule>({
    initialValues,
    onSubmit: createCronString,
  });

  function createCronString(values: Schedule) {
    const startTime = UTCTime(values.startTime).split(":");
    const stopTime = UTCTime(values.stopTime).split(":");

    const cronDays = values.daysOfWeek;
    const startCronString = `${startTime[1]} ${startTime[0]} * * ${cronDays}`;
    const stopCronString = `${stopTime[1]} ${stopTime[0]} * * ${cronDays}`;
    console.log(startCronString);
    console.log(stopCronString);


    scheduleHandler(startCronString, stopCronString);
  }

  // function setCustomDayOfWeek(e: ChangeEvent<HTMLSelectElement>): void {
  //   const fieldName = e.target.id;
  //   const selectedOptions = e.target.selectedOptions;
  //   const selectedDaysOfWeek: string[] = [];
  //   for (let i = 0; i < selectedOptions.length; i++) {
  //     selectedDaysOfWeek.push(selectedOptions.item(i)?.value!);
  //   }
  //   formik.setFieldValue(fieldName, formatCronRange(selectedDaysOfWeek));
  // }

  function handleScheduleSelect(value: string) {
    setIsCustom(value === "custom");
    formik.setFieldValue("daysOfWeek", value === "custom" ? "" : value);
  }

  function toggleDay(dayId: string) {
    const current = getDaySetFromCron(formik.values.daysOfWeek);
    if (current.has(dayId)) {
      current.delete(dayId);
    } else {
      current.add(dayId);
    }
    formik.setFieldValue("daysOfWeek", formatCronRange(Array.from(current).sort()));
  }

  function getDaySetFromCron(cron: string): Set<string> {
    const selected = new Set<string>();
    if (!cron) return selected;
    cron.split(",").forEach(part => {
      if (part.includes("-")) {
        const [start, end] = part.split('-').map(Number);
        for (let i = start; i <= end; i++) selected.add(i.toString());
      } else {
        selected.add(part);
      }
    });
    return selected;
  }

  function handleReset() {
    formik.resetForm();
    setIsCustom(false);
  }

  const selectedDays = getDaySetFromCron(formik.values.daysOfWeek);

  return (
    <form className="w-100" onSubmit={formik.handleSubmit}>
      <div className="d-flex justify-content-between">
        <h3 className="fw-bold">Schedule Workspace</h3>
        <h3 className="m-0 pb-3 text-end">
          <i className="bi bi-x-lg pointer" onClick={() => close(false)}></i>
        </h3>
      </div>
      <hr />

      <div className="d-flex flex-column my-3" style={{ minWidth: "600px",minHeight:"220px" }}>
        <div className="mb-4">
          <div className="d-flex gap-3 flex-wrap mb-2">
            {defaultSchedule?.map(({ label, value }) => (
              <div className="form-check mx-2" key={value}>
                <input
                  className={`form-check-input ${styles.cron}`}
                  type="radio"
                  name="repeat"
                  id={value}
                  checked={formik.values.daysOfWeek === value || (value === "custom" && isCustom)}
                  onChange={() => handleScheduleSelect(value)}
                  // style={{backgroundColor: formik.values.daysOfWeek === value || (value === "custom" && isCustom) ?"green":"",borderColor:"red"}}
                />
                <label className="form-check-label text-capitalize" htmlFor={value}>
                  {label}
                </label>
              </div>
            ))}
          </div>
          <h4 className="my-3 mx-2" style={{ fontWeight: "bold" }}>Days Of Week</h4>
          <div className="d-flex flex-wrap gap-2 mt-3">
            {dayMetadata.map(day => {
              const isSelected = selectedDays.has(day.id);
              const canSelect = isCustom;
              return (
                <div
                  key={day.id}
                  className="p-2 text-center mx-2"
                  style={{
                    width: "36px",
                    height: "36px",
                    borderRadius: "50%",
                    backgroundColor: day.selectedColor,
                    color: "#fff",
                    fontWeight: "bold",
                    cursor: canSelect ? "pointer" : "not-allowed",
                    opacity: isSelected ? 1 : 0.5
                  }}
                  onClick={() => {
                    if (canSelect) toggleDay(day.id);
                  }}
                >
                  {day.label}
                </div>
              );
            })}
          </div>
        </div>

        <div className="d-flex flex-row gap-4">

          <div className="mb-3">
            <CustomTimePicker
              name="startTime"
              label="start Time"
              value={formik.values.startTime}
              onChange={(newTime) => formik.setFieldValue("startTime", newTime)}
            />
            {/* <input
              type="time"
              name="startTime"
              className="form-control px-3"
              style={{ backgroundColor: "#e2e1e1", fontSize: "16px", fontWeight: "bold" }}
              value={formik.values.startTime}
              onChange={formik.handleChange}
            /> */}
          </div>

          <div className="mb-3">
            {/* <label className="my-1" style={{ fontWeight: "bold" }}>Stop Time</label>
            <input
              type="time"
              name="stopTime"
              className="form-control px-3"
              style={{ backgroundColor: "#e2e1e1", fontSize: "16px", fontWeight: "bold" }}
              value={formik.values.stopTime}
              onChange={formik.handleChange}
            /> */}
               <CustomTimePicker
              name="stopTime"
              label="Stop Time"
              value={formik.values.stopTime}
              onChange={(newTime) => formik.setFieldValue("stopTime", newTime)}
            />
          </div>
        </div>
      </div>

      <div className="d-flex justify-content-end">
        <button
          className="btn btn-dark mx-2"
          type="reset"
          onClick={handleReset}
        >
          {isScheduling ? (
            <div className="spinner-border text-light" role="status" />
          ) : "Reset"}
        </button>
        <button
          className="btn btn-danger"
          type="submit"
          disabled={!formik.values.daysOfWeek}
        >
          {isScheduling ? (
            <div className="spinner-border text-light" role="status" />
          ) : "Submit"}
        </button>
      </div>
    </form>
  );
}

export default CronScheduler;
